IssueName,RiskLevel,Severity,Number,Risk,Impact,Remediation
Connection String Parameter Pollution,High,Critical,2,"During analysis, it was observed that the mentioned file passes unvalidated data to a database connection string. Connection String Parameter Pollution (CSPP) attacks consist of injecting connection string parameters into other existing parameters. ","An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.",It is recommended that Microsoft Dotnet framework provides DBConnectionStringBuilder API for specifying connection string values that wrap these connection parameters to prevent this type of attack.
Cross-Site Scripting: Persistent ,High,Critical,29,"During analysis, it was observed that the mentioned method sends unvalidated data to a web browser which can result in the browser executing malicious code.","If an attacker successfully exploits XSS, the attacker can hijack the user session, steal user credentials and will affect Confidentiality of the application.. ",It is recommended to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.
Insecure Transport: Database,High,Critical,17,"During analysis it was observed that the application has not strictly configured to pass the data over encrypted channel. This can be further exploited by using Man in the Middle (MiTM) attacks.
Files like web.config, app.config, entlib.config, dll.config & exe.config are tranporting the data over unecncrypted channles.",An attacker can perform Man in The Middle attack and get access to the database name and password resulting in access to all the user data or even manipulate the data.,It is recommended to use the encrypt attribute with yes flag to encrypt the entire communication (Encrypt=yes). 
Password Management: Hardcoded Password,High,Critical,10,"During analysis, it was observed that hardcoded passwords were being used in the application. Hardcoded passwords can compromise system security in a way that is not easy to remedy. It is never a good idea to hardcode a password.","Not only does hardcoding a password allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password cannot be changed without patching the software.","It is recommended to encrypt or obfuscate the credentials. Also, we can use industry accepted algorithms to encrypt the credentials stored in configuration files."
SQL Injection,High,Critical,4,"During analysis, it was observed that the application is allowing unvalidated data from an untrusted source an a SQL query. ",This could allow an attacker to input an arbitary sql string resulting in SQL Injection.,It is recommended to use parameterized SQL queries and validate the user data before suplying an a sql string.
Access Control: Database,High,High,36,During analysis it was observed that the application does not have proper access control set to access the database. ,"Without proper access control, the application can execute a SQL statement that contains an attacker-controlled primary key, thereby allowing the attacker to access unauthorized records.","It is recommended to not deserialize untrusted data without validating the contents of the object stream. In order to validate classes being deserialized, the look-ahead deserialization pattern should be used."
Cross-Site Scripting: Reflected,High,High,2,"During analysis, it was observed that the mentioned method sends unvalidated data to a web browser which can result in the browser executing malicious code.","If an attacker successfully exploits XSS, the attacker can hijack the user session, steal user credentials and will affect Confidentiality of the application.. ",It is recommended to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.
Dynamic Code Evaluation: Unsafe Deserialization,High,High,2,During analysis it was observed that the appliaction is deserializing untrusted data without validating the contents.," Deserializing user-controlled object streams at runtime can allow attackers to execute arbitrary code on the server, abuse application logic, and/or lead to denial of service.","It is recommended to not deserialize untrusted data without validating the contents of the object stream. In order to validate classes being deserialized, the look-ahead deserialization pattern should be used."
Insecure Randomness,Medium,High,2,"During analysis, it was observed that the Application is using a weak random number generator,which can potentially increases the possibility of successful brute-force attack. ","When a non-cryptographic PRNG is used in a cryptographic context, it can expose the cryptography to certain types of attacks.",It is recommended to use Secure Random functions like window.crypto.random() to generate a cryptographically strong pseudo-random number.
Open Redirect,Medium,High,6,"During analysis it was observed that the application is using an unvalidated user input as url and returning the same in response, resulting in open redrict. Open redirection vulnerabilities arise when an application incorporates user-controllable data into the target of a redirection in an unsafe way.",An attacker can construct a URL within the application that causes a redirection to an arbitrary external domain.,"It is recommended that, the applications should avoid incorporating user-controllable data into redirection targets. In many cases, this behavior can be avoided in two ways: Remove the redirection function from the application, and replace links to it with direct links to the relevant target URLs. Maintain a server-side list of all URLs that are permitted for redirection. Instead of passing the target URL as a parameter to the redirector, pass an index into this list"
Password Management: Password in Configuration File,High,High,1,"During analysis it was observed that the application is Storing plaintext password in a configuration file which allows anyone who can read the file to access the password-protected resource, making it an easy target for attackers.", An attacker can read the password stored in configuration file which could result in access to sensitive data.,"It is recommended to encrypt or obfuscate the credentials. Also, we can use industry accepted algorithms to encrypt the credentials stored in configuration files."
Path Manipulation,Medium,High,1,"During analysis, it was observed that the appliacation is allowing an attackers to control the file system path argument, which allows them to access or modify otherwise protected files. ","By specifying the resource, the attacker gains a capability that would not otherwise be permitted.","It Is recommended to create a list of legitimate values from which the user must select. With this approach, the user-provided input is never used directly to specify the resource name."
Unreleased Resource: Database,Medium,High,2,During analysis it was observed that the mentioned function sometimes fails to release a database resource. Most unreleased resource issues result in general software reliability problems. ,"However, if an attacker can intentionally trigger a resource leak, the attacker may be able to launch a denial of service attack by depleting the resource pool.","It is recommended to never rely on finalize() to reclaim resources. In order for an object's finalize() method to be invoked, the garbage collector must determine that the object is eligible for garbage collection."
Unreleased Resource: LDAP,Medium,High,1,During analysis it was observed that the mentioned function sometimes fails to release a system resource allocated. Most unreleased resource issues result in general software reliability problems. ,"However, if an attacker can intentionally trigger a resource leak, the attacker may be able to launch a denial of service attack by depleting the resource pool.","It is recommended to never rely on finalize() to reclaim resources. In order for an object's finalize() method to be invoked, the garbage collector must determine that the object is eligible for garbage collection."
ASP.NET Misconfiguration: Debug Information,Low,Medium,1,"During analysis it was observed that the application is enabled with the Debug mode, which makes it easier to hook a debugger to it. This allows dumping a stack trace and accessing debugging helper classes. ",This may also leads to Sensitive Information Disclosure or leakage of any internal Informations which may gives a clue for the attacker to perform any other attacks. ,"It is recommended to always compile binaries without
debug enabled."
Cross-Site Scripting: Poor validation,Medium,Medium,1,"During analysis, it was observed that the mentioned method sends unvalidated data to a web browser which can result in the browser executing malicious code.","If an attacker successfully exploits XSS, the attacker can hijack the user session, steal user credentials and will affect Confidentiality of the application.. ",It is recommended to ensure that validation occurs in the required places and that relevant properties are set to prevent vulnerabilities.
HTML5: MIME Sniffing,Low,Medium,2," During analysis, it was observed that the web.config file does not include the X-Content-Type-Options header which could result in MIME Sniffing Attacks. Setting this header will prevent the browser from interpreting files as something else than declared by the content type in the HTTP headers. ","If MIME sniffing is not explicitly disabled, attackers can manipulate some browsers into interpreting data in a way that is not intended, allowing for cross-site scripting attacks.",Remediation: It is recommended to add the following in the web.config file: X-Content-Type-Options: nosniff.
Weak XML Schema: Unbounded Occurrences,Low,Medium,19,"During analysis, it was observed that the maxOccurs value is set to ""unbounded"". This can allow an attacker to supply the application with very large number of elements resulting in Denial of Service attacks.",An attacker can supply a huge payload which can lead to Buffer overflow attack resulting in DOS and DDOS attacks. This could potentially lead to the service becoming unavailable.,It is recommended to limit maxOccurs to a particular number.
